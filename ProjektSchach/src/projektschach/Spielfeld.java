/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projektschach;

import Exceptions.FigurAmZug;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import projektschach.Figuren.Figur;

/**
 *
 * @author Robin
 */
public final class Spielfeld extends javax.swing.JFrame {
    private final int breiteSpiel;
    private final int hoeheSpiel;
    private final int breiteFeld; // 28px
    private final Graphics2D zeichnung;
    private final FeldUmwandler feldUmwandler = new FeldUmwandler();
    private final Spiellogik logik;
    private final int textFontSize = 13;
    private final int figurFontSize = 24;
    /**
     * Creates new form Spielfeld
     */
    public Spielfeld() {
        breiteSpiel = 252;
        hoeheSpiel = breiteSpiel;
        initComponents();
        
        lblAnweisung1.setVisible(false);
        txfStart.setVisible(false);
        lblAnweisung2.setVisible(false);
        txfZiel.setVisible(false);
        btnSetzen.setVisible(false);
        
        zeichnung = (Graphics2D)canBrett.getGraphics();
        breiteFeld = breiteSpiel / 9;
        
        logik = new Spiellogik();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canBrett = new java.awt.Canvas();
        lblTitelSchach = new javax.swing.JLabel();
        lblAnweisung1 = new javax.swing.JLabel();
        txfStart = new javax.swing.JTextField();
        lblAnweisung2 = new javax.swing.JLabel();
        txfZiel = new javax.swing.JTextField();
        btnSetzen = new javax.swing.JButton();
        btnStart = new javax.swing.JButton();
        lblInfo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        canBrett.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        lblTitelSchach.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblTitelSchach.setText("Schach");

        lblAnweisung1.setText("Bewege Spieler auf Feld ");

        txfStart.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txfStart.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txfStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfStartActionPerformed(evt);
            }
        });

        lblAnweisung2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAnweisung2.setText("nach Feld");
        lblAnweisung2.setToolTipText("");

        txfZiel.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txfZiel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfZielActionPerformed(evt);
            }
        });

        btnSetzen.setText("setzen");
        btnSetzen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetzenActionPerformed(evt);
            }
        });

        btnStart.setText("start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        lblInfo.setText("Weiß fängt an, Schwarz gewinnt");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(lblTitelSchach))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(32, Short.MAX_VALUE)
                        .addComponent(canBrett, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblAnweisung1)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txfZiel)
                                        .addComponent(txfStart)
                                        .addComponent(btnSetzen)
                                        .addComponent(lblAnweisung2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblInfo))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lblTitelSchach)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblAnweisung1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txfStart, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblAnweisung2)
                        .addGap(18, 18, 18)
                        .addComponent(txfZiel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSetzen)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(canBrett, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(20, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txfStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfStartActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfStartActionPerformed

    private void txfZielActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfZielActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfZielActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        btnStart.setVisible(false);
        lblAnweisung1.setVisible(true);
        txfStart.setVisible(true);
        lblAnweisung2.setVisible(true);
        txfZiel.setVisible(true);
        btnSetzen.setVisible(true);
        
        zeichnung.setColor(Color.black);
        zeichneBrett();
        zeichneFiguren();
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnSetzenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetzenActionPerformed
        int[] startKoordiante = feldUmwandler.FeldInZahl(txfStart.getText());
        int[] zielKoordiante = feldUmwandler.FeldInZahl(txfZiel.getText());
        
        ArrayList<Figur> lstFiguren = logik.getLstFiguren();
        
        if(logik.istFeldBelegt(zielKoordiante)){
            if(logik.istFeldBelegungGleicheFarbe(startKoordiante,zielKoordiante)){
                JOptionPane.showMessageDialog(rootPane, "Auf diesem Feld steht eine Figur vom deinem Team.");
            }else{
                for (int i = 0; i < logik.getLstFiguren().size(); i++) {
                    if(lstFiguren.get(i).getPosition().getPosX() == zielKoordiante[0] &&
                            lstFiguren.get(i).getPosition().getPosY() == zielKoordiante[1]){
                        lstFiguren.get(i).setBesiegt(true);
                        logik.getLstToteFiguren().add(lstFiguren.get(i));
                    }
                }
                spielfluss(startKoordiante, zielKoordiante);
            }
        }else{            
            spielfluss(startKoordiante, zielKoordiante);
        }
        System.out.println("");
    }//GEN-LAST:event_btnSetzenActionPerformed

    public void zeichneBrett(){
        zeichnung.setFont(new Font("TimesRoman", Font.PLAIN, textFontSize));
        //zeichne Spielfeld Rahmen
        zeichnung.drawLine(0, 0, breiteSpiel - 1, 0);
        zeichnung.drawLine(breiteSpiel - 1, 0, breiteSpiel - 1, hoeheSpiel - 1);
        zeichnung.drawLine(0, hoeheSpiel - 1, breiteSpiel - 1, hoeheSpiel - 1);
        zeichnung.drawLine(0, 0, 0, hoeheSpiel - 1);
        
        //zeichne Feldlinien
        for (int i = 0; i < 9; i++) {
            zeichnung.drawLine(0, i*breiteFeld, breiteSpiel, i*breiteFeld);
            zeichnung.drawLine(i*breiteFeld, 0, i*breiteFeld, hoeheSpiel);
        }
        
        //zeichne Beschriftung
        for (int i = 1; i <= 8; i++) {
            zeichnung.drawString(feldUmwandler.NummerInBuchstabe(i), (i*breiteFeld)+(int)(breiteFeld*0.4), (int)(breiteFeld*0.7));
            zeichnung.drawString(Integer.toString(i),(int)(breiteFeld*0.4) , (i*breiteFeld)+(int)(breiteFeld*0.7));
        }
        //zeichne Muster schwarz
        zeichnung.setColor(Color.decode("#5B7B65"));
        for (int i = 1; i <= 8; i+=2) {
            for (int j = 1; j <= 8; j+=1) {
                if(j%2==0){
                    zeichnung.fillRect((i+1)*breiteFeld+1, j*breiteFeld+1, breiteFeld-1, breiteFeld-1);
                }else{
                    zeichnung.fillRect(i*breiteFeld+1, j*breiteFeld+1, breiteFeld-1, breiteFeld-1);
                }
            }
        }
        
        //zeichne Muster weiß
        zeichnung.setColor(Color.white);
        for (int i = 1; i <= 8; i+=2) {
            for (int j = 1; j <= 8; j+=1) {
                if(j%2==1){
                    zeichnung.fillRect((i+1)*breiteFeld+1, j*breiteFeld+1, breiteFeld-1, breiteFeld-1);
                }else{
                    zeichnung.fillRect(i*breiteFeld+1, j*breiteFeld+1, breiteFeld-1, breiteFeld-1);
                }
            }
        }
        zeichnung.setColor(Color.black);
    }
    public void zeichneFiguren(){
        ArrayList<Figur> lstFiguren = logik.getLstFiguren();
        
        zeichnung.setFont(new Font("TimesRoman", Font.PLAIN, figurFontSize));
        for (int i = 0; i < logik.getLstFiguren().size(); i++) {
            if(!lstFiguren.get(i).isBesiegt()){
                int x = lstFiguren.get(i).getPosition().getPosX();
                int y = lstFiguren.get(i).getPosition().getPosY();
                zeichnung.drawString(lstFiguren.get(i).getBuchstabe(),breiteFeld*x+4+breiteFeld,breiteFeld*y+22+breiteFeld);
            }
        }
        zeichnung.setFont(new Font("TimesRoman", Font.PLAIN, textFontSize));
    }
    public void spielfluss(int[] startKoordiante, int[] zielKoordiante){
        long start = System.currentTimeMillis();
        
        Figur fig = logik.getFigurAufFeld(startKoordiante);
        ArrayList<Feld> möglicheFelder = fig.getPossitionsAbleToMove(logik.getLstFiguren());
        boolean feldIstDabei = false;
        
        //ungültige Felder aussortieren
        for (int i = 0; i < möglicheFelder.size(); i++) {
            if(möglicheFelder.get(i).getPosX() < 0 || möglicheFelder.get(i).getPosX() > 7 ||
               möglicheFelder.get(i).getPosY() < 0 || möglicheFelder.get(i).getPosY() > 7){
                möglicheFelder.remove(i);
            }
        }
        
        if(fig.istWeiß()==logik.getSpielerWeiß().isAmZug()){ //prüfen ob Spieler figur aus seinem Team nutzt
            for (int i = 0; i < möglicheFelder.size(); i++) {
                if(!fig.istFigurImWeg(startKoordiante, zielKoordiante, logik.getLstFiguren())){
                    Feld feld = möglicheFelder.get(i);
                    if(feld.getPosX() == zielKoordiante[0] && feld.getPosY() == zielKoordiante[1]){
                        feldIstDabei = true;
                    }
                }else{
                    JOptionPane.showMessageDialog(rootPane, "Du kannst nicht über andere Spielfiguren springen");
                    break;
                }
            }
        }else{
            JOptionPane.showMessageDialog(rootPane, "diese Figur gehört nicht zu deinem Team");
        }
        
        if(feldIstDabei){
            int anzahlMovesFig = logik.getFigurAufFeld(startKoordiante).getAnzahlGesetzt();
            logik.getFigurAufFeld(startKoordiante).setAnzahlGesetzt(anzahlMovesFig+=1);
            logik.setzeFigur(startKoordiante, zielKoordiante);
            
            zeichneBrett();
            zeichneFiguren();
            
            logik.spielerWechsel();

            if(logik.getSpielerWeiß().isAmZug()){
                lblInfo.setText("Weiß ist am Zug"); 
            }
            if(logik.getSpielerSchwarz().isAmZug()){
                lblInfo.setText("Schwarz ist am Zug");
            }
        }else{
            JOptionPane.showMessageDialog(rootPane, "diese Figur kann sich nicht auf diese Position bewegen");
        }
        
        long end = System.currentTimeMillis();
        float msec = end - start;
        System.out.println(msec + " millisecs");
    }
    
    /**
     * @param args the command line arguments
     */

    
     

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSetzen;
    private javax.swing.JButton btnStart;
    private java.awt.Canvas canBrett;
    private javax.swing.JLabel lblAnweisung1;
    private javax.swing.JLabel lblAnweisung2;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JLabel lblTitelSchach;
    private javax.swing.JTextField txfStart;
    private javax.swing.JTextField txfZiel;
    // End of variables declaration//GEN-END:variables
}
